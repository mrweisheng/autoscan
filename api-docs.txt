# Auto Login Service API 文档

## 基础信息
- 基础URL: http://104.37.187.30:9000
- 所有接口均使用 GET 方法
- 响应格式: JSON

## 通用响应格式
成功响应:
{
    "status": "success",
    "data": {}, // 可选
    "message": "xxx" // 可选
}

错误响应:
{
    "status": "error",
    "message": "错误信息"
}

## API 端点详情

### 1. 手机端推送登录需求
- 接口: /mobile/push-need-login
- 方法: GET
- 描述: 手机端发起登录请求，记录需要登录的设备信息
- 请求参数:
  - name: 字符串，必填，用户名
  - phone_device: 字符串，必填，设备标识
  - 说明: 创建或更新记录时，会将 login_status 设置为 'offline'
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "message": "Login request recorded"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "Missing required parameters: name and phone_device"
    }

### 2. PC端获取需要登录的账号信息
- 接口: /pc/get_need_login
- 方法: GET
- 描述: PC端获取待登录的账号信息，获取后该记录会被删除
- 请求参数:
  - phone_device: 字符串，必填，设备标识
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "name": "用户名",
            "phone_device": "设备标识",
            "login_status": "状态"
        }
    }
  - 未找到记录 (404):
    {
        "status": "success",
        "data": null,
        "message": "No record found for this device"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "Missing phone_device parameter"
    }

### 3. PC端推送扫码需求
- 接口: /pc/push_need_scan
- 方法: GET
- 描述: PC端请求手机扫码，创建或更新扫码记录
- 请求参数:
  - name: 字符串，必填，用户名
  - phone_device: 字符串，必填，设备标识
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "message": "Successfully processed scan record for: {name}"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "Missing required parameters: name and phone_device"
    }

### 4. 手机端获取需要扫码的记录
- 接口: /mobile/get-need-scan
- 方法: GET
- 描述: 手机端获取待扫码的记录，获取后该记录会被删除
- 请求参数:
  - phone_device: 字符串，必填，设备标识
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "name": "用户名",
            "phone_device": "设备标识",
            "login_status": "scan"
        }
    }
  - 未找到记录 (404):
    {
        "status": "success",
        "data": null,
        "message": "No scan record found for this device"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "Missing phone_device parameter"
    }

### 5. 获取不活跃账号
- 接口: /accounts/inactive
- 方法: GET
- 描述: 获取超过12天未登录的账号列表
- 请求参数:
  - days: 整数，可选，指定未登录天数（1-20之间），默认使用配置文件中的值（12天）
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": [
            {
                "phoneNumber": "639123456789",
                "name": "User Name",
                "lastLogin": "2025-02-20T04:39:41.000Z",
                "proxy": {
                    "host": "72.1.123.123",
                    "port": "8080",
                    "username": "proxyuser",
                    "password": "proxypass"
                }
            }
        ]
    }
  - 参数错误 (400):
    {
        "status": "error",
        "message": "Days parameter must be an integer between 1 and 20"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "Internal server error"
    }

### 6. 更新账号最后登录时间
- 接口: /accounts/update-login
- 方法: GET
- 描述: 更新指定账号的最后登录时间为当前时间
- 请求参数:
  - phoneNumber: 字符串，必填，手机号码
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "phoneNumber": "639123456789",
            "lastLogin": "2025-03-07T08:30:00.000Z"
        }
    }
  - 未找到账号 (404):
    {
        "status": "success",
        "message": "Account not found"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "Missing phoneNumber parameter"
    }

### 7. 文件上传
- 接口: /upload
- 方法: POST
- 描述: 上传 .txt 或 .vcf 文件，返回可公网访问的下载链接
- 请求参数:
  - file: 文件，必填，支持 .txt 和 .vcf 格式
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "filename": "1709123456789-contacts.vcf",
            "originalname": "contacts.vcf",
            "size": 1024,
            "url": "http://104.37.187.30:9000/uploads/1709123456789-contacts.vcf"
        },
        "message": "File uploaded successfully"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "No file uploaded or file type not allowed"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "Internal server error"
    }

### 8. 文件下载
- 接口: /download/:filename
- 方法: GET
- 描述: 下载指定文件名的文件
- 请求参数:
  - filename: 字符串，必填，文件名（URL 路径参数）
- 响应:
  - 成功: 返回文件内容，设置适当的 Content-Type 和 Content-Disposition 头
  - 错误 (400):
    {
        "status": "error",
        "message": "Missing filename parameter"
    }
  - 错误 (404):
    {
        "status": "error",
        "message": "File not found"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "Internal server error"
    }

### 9. 获取文件列表
- 接口: /files
- 方法: GET
- 描述: 根据文件类型获取所有可用文件的URL列表
- 请求参数:
  - type: 字符串，必填，文件类型（'txt' 或 'vcf'）
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "files": [
                {
                    "filename": "contacts.txt",
                    "url": "http://104.37.187.30:9000/uploads/contacts.txt",
                    "downloadUrl": "http://104.37.187.30:9000/download/contacts.txt",
                    "size": 1024
                },
                {
                    "filename": "contacts2.txt",
                    "url": "http://104.37.187.30:9000/uploads/contacts2.txt",
                    "downloadUrl": "http://104.37.187.30:9000/download/contacts2.txt",
                    "size": 2048
                }
            ]
        },
        "message": "Found 2 txt files"
    }
  - 未找到文件 (200):
    {
        "status": "success",
        "data": {
            "files": []
        },
        "message": "No txt files found"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "Invalid or missing type parameter. Must be 'txt' or 'vcf'"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "Internal server error"
    }

### 10. 获取被封禁账号
- 接口: /accounts/random-banned
- 方法: GET
- 描述: 顺序获取一个状态为 banned 且 isHandle 为 false 的账号，不会修改账号状态。采用单例模式确保缓存和索引共享，防止重复返回账号。服务器会缓存所有符合条件的账号，并严格按顺序返回，同一缓存期内绝不返回重复账号。缓存有效期为1小时，当所有缓存账号均被返回后，返回data为null并提示等待时间。同时采用锁机制处理并发请求，确保索引严格递增。
- 请求参数: 无
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "name": "用户名",
            "phoneNumber": "手机号码",
            "proxy": {
                "host": "代理主机",
                "port": "代理端口",
                "username": "代理用户名",
                "password": "代理密码"
            }
        }
    }
  - 未找到记录 (404):
    {
        "status": "success",
        "data": null,
        "message": "没有找到可用的被封禁账号"
    }
  - 缓存已耗尽 (404):
    {
        "status": "success",
        "data": null,
        "message": "当前时段的所有账号已被获取完毕，请在 45 分钟后再试"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "服务器内部错误"
    }

### 11. 标记账号处理成功
- 接口: /accounts/mark-handled
- 方法: GET
- 描述: 将指定账号的 isHandle 状态设置为 true
- 请求参数:
  - phoneNumber: 字符串，必填，手机号码
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "phoneNumber": "手机号码",
            "isHandle": true
        },
        "message": "账号标记为已处理"
    }
  - 未找到记录 (404):
    {
        "status": "success",
        "data": null,
        "message": "未找到该账号"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "缺少必填参数: phoneNumber"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "服务器内部错误"
    }

### 12. 图片上传
- 接口: /upload/image
- 方法: POST
- 描述: 上传图片文件，支持jpg、png、gif等常见图片格式，返回可公网访问的URL和下载链接
- 请求参数:
  - file: 文件，必填，支持的图片格式：jpg、jpeg、png、gif、webp
  - maxSize: 10MB
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "filename": "1709123456789-photo.jpg",
            "originalname": "photo.jpg",
            "size": 1024,
            "width": 800,
            "height": 600,
            "type": "image/jpeg",
            "url": "http://104.37.187.30:9000/uploads/images/1709123456789-photo.jpg",
            "downloadUrl": "http://104.37.187.30:9000/download/1709123456789-photo.jpg"
        },
        "message": "Image uploaded successfully"
    }
  - 错误 (400):
    {
        "status": "error",
        "message": "No image uploaded or image type not allowed"
    }
  - 错误 (413):
    {
        "status": "error",
        "message": "Image size exceeds 10MB limit"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "Internal server error"
    }

### 13. 随机获取商品
- 接口: /products/random
- 方法: GET
- 描述: 从shop_products表中随机返回一条商品记录，使用MongoDB的$sample聚合操作符实现真随机，支持高并发请求
- 请求参数: 无
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "shopType": "店铺类型",
            "productName": "商品名称",
            "originalPrice": 100,
            "discountPrice": 80,
            "imageUrl": "data:image/jpeg;base64,...", // base64编码的图片数据
            "productDescription": "商品描述"
        },
        "message": "成功获取随机商品"
    }
  - 未找到记录 (404):
    {
        "status": "success",
        "data": null,
        "message": "商品表为空，没有可返回的记录"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "服务器内部错误"
    }

### 14. 发送邮件
- 接口: /send-email
- 方法: POST
- 描述: 发送邮件到指定的邮箱地址，支持发送到多个收件人
- 请求参数 (JSON格式):
  - to: 字符串或数组，必填，收件人邮箱地址。可以是单个邮箱地址、用逗号分隔的多个邮箱地址(如"a@example.com,b@example.com")或邮箱地址数组
  - subject: 字符串，必填，邮件主题
  - text: 字符串，可选，纯文本格式的邮件内容
  - html: 字符串，可选，HTML格式的邮件内容（如果同时提供text和html，优先使用html）
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "message": "邮件成功发送给 2 个收件人"
    }
  - 参数错误 (400):
    {
        "status": "error",
        "message": "收件人(to)、主题(subject)和内容(text或html)为必填项"
    }
    或
    {
        "status": "error",
        "message": "以下邮箱格式不正确: invalid@mail, another-invalid"
    }
  - 邮件发送失败 (500):
    {
        "status": "error",
        "message": "邮件发送失败: [错误详情]"
    }

### 15. 添加疑似永久封禁账号
- 接口: /accounts/report-permanent-ban
- 方法: GET
- 描述: 标记一个账号为疑似永久封禁状态，存储在主数据库，来源字段根据当前环境配置的`ACCOUNTS_API_SOURCE`设置
- 请求参数:
  - phoneNumber: 字符串，必填，手机号码
  - remarks: 字符串，可选，备注信息
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "phoneNumber": "手机号码",
            "source": "来源(main/shu/both)",
            "reportedAt": "2023-04-19T12:34:56.789Z",
            "status": "pending"
        },
        "message": "成功添加疑似永久封禁账号"
    }
  - 已存在 (409):
    {
        "status": "error",
        "message": "该号码已经被标记为疑似永久封禁"
    }
  - 参数错误 (400):
    {
        "status": "error",
        "message": "缺少必填参数: phoneNumber"
    }
  - 服务器错误 (500):
    {
        "status": "error",
        "message": "服务器内部错误"
    }

### 16. 获取疑似永久封禁账号列表
- 接口: /accounts/permanently-banned
- 方法: GET
- 描述: 获取所有疑似永久封禁账号列表，支持按来源和状态筛选
- 请求参数:
  - source: 字符串，可选，筛选特定来源的记录(main/shu/both)
  - status: 字符串，可选，筛选特定状态的记录(pending/confirmed/invalid)
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": [
            {
                "phoneNumber": "手机号码1",
                "source": "main",
                "reportedAt": "2023-04-19T12:34:56.789Z",
                "status": "pending",
                "remarks": "备注信息",
                "createdAt": "2023-04-19T12:34:56.789Z",
                "updatedAt": "2023-04-19T12:34:56.789Z"
            },
            {
                "phoneNumber": "手机号码2",
                "source": "shu",
                "reportedAt": "2023-04-19T13:45:07.890Z",
                "status": "confirmed",
                "remarks": "",
                "createdAt": "2023-04-19T13:45:07.890Z",
                "updatedAt": "2023-04-20T09:12:34.567Z"
            }
        ],
        "message": "成功获取 2 条记录"
    }
  - 服务器错误 (500):
    {
        "status": "error",
        "message": "服务器内部错误"
    }

### 17. 更新疑似永久封禁账号状态
- 接口: /accounts/update-permanent-status
- 方法: GET
- 描述: 更新指定疑似永久封禁账号的状态和备注
- 请求参数:
  - phoneNumber: 字符串，必填，手机号码
  - status: 字符串，必填，新的状态，必须是以下之一: pending, confirmed, invalid
  - remarks: 字符串，可选，新的备注信息
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": {
            "phoneNumber": "手机号码",
            "source": "main",
            "reportedAt": "2023-04-19T12:34:56.789Z",
            "status": "confirmed",
            "remarks": "已确认永久封禁",
            "createdAt": "2023-04-19T12:34:56.789Z",
            "updatedAt": "2023-04-20T15:30:45.678Z"
        },
        "message": "成功更新疑似永久封禁账号状态"
    }
  - 未找到记录 (404):
    {
        "status": "error",
        "message": "未找到指定的账号记录"
    }
  - 参数错误 (400):
    {
        "status": "error",
        "message": "缺少必填参数: phoneNumber"
    }
    或
    {
        "status": "error",
        "message": "状态参数无效，必须是: pending, confirmed, invalid"
    }
  - 服务器错误 (500):
    {
        "status": "error",
        "message": "服务器内部错误"
    }

### 18. 获取已处理的被封禁账号
- 接口: /accounts/handled-banned
- 方法: GET
- 描述: 获取状态为banned且isHandle为true的账号列表，默认从主数据库查询，可通过参数指定从Shu数据库查询
- 请求参数:
  - fromShu: 布尔值，可选，是否从Shu数据库查询。true或1表示从Shu数据库查询，默认为false，从主数据库查询
- 响应示例:
  - 成功 (200):
    {
        "status": "success",
        "data": [
            {
                "name": "用户名",
                "phoneNumber": "手机号码",
                "proxy": {
                    "host": "代理主机",
                    "port": "代理端口",
                    "username": "代理用户名",
                    "password": "代理密码"
                }
            },
            // 更多账号...
        ],
        "totalCount": 10,
        "source": "main" // 或 "shu"
    }
  - 错误 (500):
    {
        "status": "error",
        "message": "服务器内部错误"
    }

## 错误码说明
- 200: 请求成功
- 400: 请求参数错误
- 404: 未找到相关记录
- 409: 资源冲突(如记录已存在)
- 500: 服务器内部错误

